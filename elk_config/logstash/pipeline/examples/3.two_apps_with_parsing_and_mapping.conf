input {
  beats {
    port => 5044
  }
}

filter {
    # Если лог пришел с тегом "legacyApp", разбираем по составному алгоритму
  if "legacyApp" in [tags] {
    grok {
        break_on_match => false
        match => [
            "message", "\| method: %{WORD:method} \|",
            "message", "\| %{LOGLEVEL:level} \|",
            "message", "\| user: %{USERNAME:user} \|",
            "message", "(?<time>\d{2}\/\d{2} \d{2}:\d{2}:\d{2}[AP]M '\d{2} [+-]\d{4})",
            "message", "\| message: %{GREEDYDATA:msg}",
            "message", "\| ip: %{IPV4:user_ip}"
            ]
    }

    # Парсинг даты в общечеловеческий формат, выравнивание часового пояса
    date {
      match => ["time", "MM/dd hh:mm:ssa ''yy Z", "ISO8601", "yyyy-MM-dd HH:mm:ss"] #Тут, как и в grok, мб несколько паттернов
      timezone => "UTC"
      target => "time"
    }

    mutate {
        # Маппинг уровня логов
        gsub => [
            "level", "err", "ERROR",
            "level", "debug", "DEBUG",
            "level", "emerg", "ERROR",
            "level", "warning", "WARN",
            "level", "alert", "WARN",
            "level", "crit", "ERROR",
            "level", "info", "INFO",
            "level", "notice", "INFO"
        ]
    }

    # Дефолтное значение в gsub установить нельзя, но есть костыль
    if ![level] or [level] not in ["ERROR", "DEBUG", "WARN", "INFO"] {
      mutate {
        replace => { "level" => "UNKNOWN" }
      }
    }

    # Если лог пришел из с тэгом "backend", разбираем как JSON
  } else if "backend" in [tags] {
    json {
      source => "message"
    }

    # Переименование поля
    mutate {
        rename => {"ip" => "user_ip"}
    }

    # Если логи пришел без ожидаемого тега, реализуем какую-то отдельную логику
  } else {
    mutate {
        add_tag => ["failed to recognize condition"]
    }
  }
}

output {
  # Отправка логов в Elasticsearch
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"
  }

  # Вывод логов в консоль
  stdout {
    codec => rubydebug  # Форматирование логов для удобного чтения
  }
}
